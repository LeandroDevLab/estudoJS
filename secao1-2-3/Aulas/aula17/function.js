/* Fun√ß√µes */
// fun√ß√µes podem ou n√£o retornar valores

/*
√© melhor criar v√°rias fun√ß√µes que fazem coisas espec√≠ficas 
do que criar um fun√ß√£o que faz muita coisa. 
*/

// arrow function linha
const raiz = n => n ** 0.5; // ;  üëÄ nem √© obrigat√≥rio aqui ü§Ø

/*
Arrow Function
const raiz = (n) => { //fun√ß√£o anonima, dentro de uma vari√°vel
    return n ** 0.5;
}; // ;  üëÄ √© obrigat√≥rio aqui */

/* 
Arrow Function substituiu essa forma de fazer fun√ß√µes, mas ainda funciona
const raiz = function(n) { //fun√ß√£o anonima, dentro de uma vari√°vel
    return n ** 0.5;
}; // ;  üëÄ √© obrigat√≥rio aqui 
*/

console.log('====== Fun√ß√£o dentro de uma vari√°vel chamada: raiz ======'); 
console.log(raiz(9));
console.log(raiz(16));


console.log('====== Fun√ß√µes de soma ======');
function soma(x = 0, y = 0) { //enviando valor padr√£o caso n√£o seja inserido informa√ß√µes
    const resultado = x + y;
    return resultado; //depois do return encerra tudo que vier ap√≥s!
    console.log('Hello Word!'); // n√£o ser√° executada
}

console.log(soma(2,2));
console.log(soma(2,4));
console.log(soma()); // n√£o ser√° mais NaN -> definido valores padr√µes

/* function soma(x, y) {
    const resultado = x + y;
    return resultado; //depois do return encerra tudo que vier ap√≥s!
    console.log('Hello Word!'); // n√£o ser√° executada
}

console.log(soma(2,2));
console.log(soma(2,4));
console.log(soma()); // NaN -> os dados n√£o foram enviados */
console.log('====== Fun√ß√µes de sauda√ß√£o ======');
function saudacao(nome) {
    return `Bom dia ${nome}!`
}

const variavel = saudacao('Luiz');
console.log(variavel); 

/* function saudacao(nome) { //nome √© um parametro
    console.log(`Bom dia ${nome}!`);
    return 123456; //adicionei um retorno
}

const variavel = saudacao('Luiz'); //vai executar a a√ß√£o e vai receber o valor do retorno
console.log(variavel);  */