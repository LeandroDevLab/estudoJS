//Firts-class objects (Objetos de primeira classe)

/*
 FUN√á√ïES 
 1Ô∏è‚É£- declara√ß√£o de fun√ß√£o (function "hoisting"üëÄüíñ) : posso chamar a 
    fun√ß√£o antes ou depois que ir√° funcionar normalmente
*/

/* Declara√ß√£o de fun√ß√£o normal e tem HOISTING */
falaOi();

function falaOi() {
    console.log('Oi!');
}

//2Ô∏è‚É£ - Function Expression
// souUmDado(); n√£o posso chamar ela antes
const souUmDado = function () {
    console.log('Sou um dado.');
};

souUmDado(); // n√£o tem HOISTING, s√≥ pode ser chamado depois!

function executaFuncao(funcao) {
    console.log('vou executar a fun√ß√£o abaixo: ')
    funcao();
};

executaFuncao(souUmDado); // Sou um dado.

//3Ô∏è‚É£ - Arrow function üëÄ n√£o tem arguments armazenador, ver proxima aula
const funcaoArrow = () => {
    console.log('Sou uma arrow function');
};

funcaoArrow();

//Dentro de um objeto (m√©todo de um objeto)
const obj = {
    //forma 1 - cl√°ssica (m√©todo dentro de um objeto)
    falar: function () {
        console.log('Fun√ß√£o dentro de objeto, estou falando...');
    },
    //forma 2 - atualizada (m√©todo dentro de um objeto)
    dizer() {
        console.log('Outra fun√ß√£o tbm dentro de objeto, estou dizendo...')
    }
};

obj.falar();
obj.dizer();
